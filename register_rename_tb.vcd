$version Generated by VerilatedVcd $end
$timescale 1ns $end
 $scope module TOP $end
  $scope module register_rename_tb $end
   $var wire 32 b CLK_PERIOD [31:0] $end
   $var real 64 c DUTY_CYCLE $end
   $var wire 1 ` clk $end
   $var wire 1 # rst $end
   $var wire 1 $ stall $end
   $var wire 65 % decoded_dd [64:0] $end
   $var wire 15 ( areg [14:0] $end
   $var wire 21 - preg_alias [20:0] $end
   $var wire 1 . rat_w_en $end
   $var wire 5 ) dst_areg [4:0] $end
   $var wire 7 7 new_alias [6:0] $end
   $var wire 7 7 free_preg [6:0] $end
   $var wire 1 8 empty $end
   $var wire 1 * r_en $end
   $var wire 5 + bypassed_dst_i [4:0] $end
   $var wire 7 , bypassed_alias_i [6:0] $end
   $var wire 5 ) bypassed_dst_o [4:0] $end
   $var wire 7 7 bypassed_alias_o [6:0] $end
   $var wire 78 / decoded_rr [77:0] $end
   $var wire 1 e fpq_w_en $end
   $var wire 7 f preg_in [6:0] $end
   $var wire 1 9 full $end
   $var wire 32 a cycle_count [31:0] $end
   $scope module fpg $end
    $var wire 32 g DEPTH [31:0] $end
    $var wire 1 ` clk $end
    $var wire 1 # rst $end
    $var wire 1 e w_en $end
    $var wire 1 * r_en $end
    $var wire 7 f preg_in [6:0] $end
    $var wire 7 7 preg_out [6:0] $end
    $var wire 1 9 full $end
    $var wire 1 8 empty $end
    $var wire 8 : w_ptr [7:0] $end
    $var wire 8 ; r_ptr [7:0] $end
    $var wire 1 < empty_int $end
    $var wire 1 = full_or_empty $end
    $var wire 32 > i [31:0] $end
   $upscope $end
   $scope module rat $end
    $var wire 1 ` clk $end
    $var wire 1 # rst $end
    $var wire 15 ( areg [14:0] $end
    $var wire 21 - preg_alias [20:0] $end
    $var wire 1 . w_en [0:0] $end
    $var wire 5 ) dst_areg [4:0] $end
    $var wire 7 7 new_alias [6:0] $end
    $var wire 7 ? register_alias_table[0] [6:0] $end
    $var wire 7 @ register_alias_table[1] [6:0] $end
    $var wire 7 A register_alias_table[2] [6:0] $end
    $var wire 7 B register_alias_table[3] [6:0] $end
    $var wire 7 C register_alias_table[4] [6:0] $end
    $var wire 7 D register_alias_table[5] [6:0] $end
    $var wire 7 E register_alias_table[6] [6:0] $end
    $var wire 7 F register_alias_table[7] [6:0] $end
    $var wire 7 G register_alias_table[8] [6:0] $end
    $var wire 7 H register_alias_table[9] [6:0] $end
    $var wire 7 I register_alias_table[10] [6:0] $end
    $var wire 7 J register_alias_table[11] [6:0] $end
    $var wire 7 K register_alias_table[12] [6:0] $end
    $var wire 7 L register_alias_table[13] [6:0] $end
    $var wire 7 M register_alias_table[14] [6:0] $end
    $var wire 7 N register_alias_table[15] [6:0] $end
    $var wire 7 O register_alias_table[16] [6:0] $end
    $var wire 7 P register_alias_table[17] [6:0] $end
    $var wire 7 Q register_alias_table[18] [6:0] $end
    $var wire 7 R register_alias_table[19] [6:0] $end
    $var wire 7 S register_alias_table[20] [6:0] $end
    $var wire 7 T register_alias_table[21] [6:0] $end
    $var wire 7 U register_alias_table[22] [6:0] $end
    $var wire 7 V register_alias_table[23] [6:0] $end
    $var wire 7 W register_alias_table[24] [6:0] $end
    $var wire 7 X register_alias_table[25] [6:0] $end
    $var wire 7 Y register_alias_table[26] [6:0] $end
    $var wire 7 Z register_alias_table[27] [6:0] $end
    $var wire 7 [ register_alias_table[28] [6:0] $end
    $var wire 7 \ register_alias_table[29] [6:0] $end
    $var wire 7 ] register_alias_table[30] [6:0] $end
    $var wire 7 ^ register_alias_table[31] [6:0] $end
    $var wire 32 _ i [31:0] $end
   $upscope $end
   $scope module renamer $end
    $var wire 1 ` clk $end
    $var wire 1 # rst $end
    $var wire 1 $ stall $end
    $var wire 65 % decoded_dd [64:0] $end
    $var wire 15 ( areg [14:0] $end
    $var wire 21 - preg_alias [20:0] $end
    $var wire 1 . w_en $end
    $var wire 5 ) dst_areg [4:0] $end
    $var wire 7 7 new_alias [6:0] $end
    $var wire 7 7 free_preg [6:0] $end
    $var wire 1 8 empty $end
    $var wire 1 * r_en $end
    $var wire 5 + bypassed_dst_i [4:0] $end
    $var wire 7 , bypassed_alias_i [6:0] $end
    $var wire 5 ) bypassed_dst_o [4:0] $end
    $var wire 7 7 bypassed_alias_o [6:0] $end
    $var wire 78 / decoded_rr [77:0] $end
    $var wire 7 2 rr_rd [6:0] $end
    $var wire 7 3 rr_rs1 [6:0] $end
    $var wire 7 4 rr_rs2 [6:0] $end
    $var wire 7 5 renamed_src1 [6:0] $end
    $var wire 7 6 renamed_src2 [6:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000000000000000000000000000000000000 %
b000000000000000 (
b00000 )
1*
b00000 +
b0000000 ,
b000000000000000000000 -
0.
b000000000000000000000000000000000000000000000000000000000000000000000000000000 /
b0000000 2
b0000000 3
b0000000 4
b0000000 5
b0000000 6
b0000000 7
18
09
b00000000 :
b00000000 ;
1<
1=
b00000000000000000000000000000000 >
b0000000 ?
b0000000 @
b0000000 A
b0000000 B
b0000000 C
b0000000 D
b0000000 E
b0000000 F
b0000000 G
b0000000 H
b0000000 I
b0000000 J
b0000000 K
b0000000 L
b0000000 M
b0000000 N
b0000000 O
b0000000 P
b0000000 Q
b0000000 R
b0000000 S
b0000000 T
b0000000 U
b0000000 V
b0000000 W
b0000000 X
b0000000 Y
b0000000 Z
b0000000 [
b0000000 \
b0000000 ]
b0000000 ^
b00000000000000000000000000000000 _
0`
b00000000000000000000000000000000 a
b00000000000000000000000000010100 b
r0.5 c
0e
b0000000 f
b00000000000000000000000010000000 g
#10
1#
1$
0*
08
19
b10000000 :
0<
b00000000000000000000000010000000 >
b0000001 @
b0000010 A
b0000011 B
b0000100 C
b0000101 D
b0000110 E
b0000111 F
b0001000 G
b0001001 H
b0001010 I
b0001011 J
b0001100 K
b0001101 L
b0001110 M
b0001111 N
b0010000 O
b0010001 P
b0010010 Q
b0010011 R
b0010100 S
b0010101 T
b0010110 U
b0010111 V
b0011000 W
b0011001 X
b0011010 Y
b0011011 Z
b0011100 [
b0011101 \
b0011110 ]
b0011111 ^
b00000000000000000000000000100000 _
b00000000000000000000000000000001 a
#20
#30
0#
0$
b00000000000000000000000000000000000000000000000001000100001100000 %
b000010001000011 (
b00001 )
1*
b000000000000100000011 -
1.
b000000000000000000000000000000000000000000000000000100000100000011000000000001 /
b0000010 3
b0000011 4
b0000010 5
b0000011 6
b0000001 7
09
b00000001 ;
0=
b0000000 @
1`
b00000000000000000000000000000010 a
#40
0`
#50
b00000000000000000000000000000000000000000000010000010000010000000 %
b100000100000100 (
b10000 )
b000000100010000000100 -
b000000000000000000000000000000000000000000000000001000010000000100000000000010 /
b0000001 2
b0001000 3
b0000100 4
b0001000 5
b0000100 6
b0000010 7
b00000010 ;
b0000001 O
1`
b00000000000000000000000000000011 a
#60
0`
#70
b01000 +
b1111111 ,
b000001000010000000100 -
b000000000000000000000000000000000000000000000000001111111110000100000000000011 /
b0000010 2
b1111111 5
b0000011 7
b00000011 ;
b0000010 O
1`
b00000000000000000000000000000100 a
#80
0`
#90
b000001100010000000100 -
b000000000000000000000000000000000000000000000000010011111110000100000000000100 /
b0000011 2
b0000100 7
b00000100 ;
b0000011 O
1`
b00000000000000000000000000000101 a
#100
0`
#110
b000010000010000000100 -
b000000000000000000000000000000000000000000000000010111111110000100000000000101 /
b0000100 2
b0000101 7
b00000101 ;
b0000100 O
1`
b00000000000000000000000000000110 a
#120
0`
